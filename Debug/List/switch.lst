###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.60.5.50814/W32 for MSP430       28/Mar/2014  12:10:51 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  32                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430X                                                    #
#    __data_model  =  small                                                   #
#    Source file   =  C:\Users\Christopher\Documents\GitHub\ece306-linefollow #
#                     er\switch.c                                             #
#    Command line  =  C:\Users\Christopher\Documents\GitHub\ece306-linefollow #
#                     er\switch.c -lC C:\Users\Christopher\Documents\GitHub\e #
#                     ce306-linefollower\Debug\List\ -o                       #
#                     C:\Users\Christopher\Documents\GitHub\ece306-linefollow #
#                     er\Debug\Obj\ --no_cse --no_unroll --no_inline          #
#                     --no_code_motion --no_tbaa --debug -D__MSP430FR5739__   #
#                     -e --double=32 --dlib_config "C:\Program Files          #
#                     (x86)\IAR Systems\Embedded Workbench                    #
#                     6.5\430\LIB\DLIB\dl430xsfn.h" --core=430X               #
#                     --data_model=small -Ol --multiplier=32                  #
#                     --multiplier_location=4C0 --hw_workaround=CPU40         #
#    List file     =  C:\Users\Christopher\Documents\GitHub\ece306-linefollow #
#                     er\Debug\List\switch.lst                                #
#    Object file   =  C:\Users\Christopher\Documents\GitHub\ece306-linefollow #
#                     er\Debug\Obj\switch.r43                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Christopher\Documents\GitHub\ece306-linefollower\switch.c
      1          /******************************************************************************
      2          Switch Configurations
      3          
      4          DESC: Contains methods that poll the switches and act on that information
      5          
      6          GLOBALS: display_1 and display_2, current_SW1_state, and current_SW2_state are changed
      7          None defined.
      8          
      9          Nathan Hansen, 7 Feb 2014, Built with IAR Embedded Workbench Version: 5.60.5
     10          ******************************************************************************/
     11          
     12          
     13          #include  "functions.h"
     14          #include  "macros.h"
     15          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x220
   \   union <unnamed> _A_PBIN_L
   \                     _A_PBIN_L:
   \   000000                DS8 2
     16          
     17          //Switches_Process
     18          //DESC: Detects switch toggle (press & release) by polling current states
     19          //and comparing to records of the past state. On switch toggle, motor forward outputs
     20          //and LCD readout of motor status are toggled on/off accordingly
     21          //ARGS: None
     22          //RET: None

   \                                 In  segment CODE, align 2
     23          void Switches_Process(void)
   \                     Switches_Process:
     24          {
     25          	//            "0123456789abcdef"
     26          	//display_1 = " Lt Forward Rt  ";
     27          	//display_2 = "OFF         OFF ";
     28          	
     29          	char current_sw1_state = isPressed(SW1);
   \   000000   1C43         MOV.W   #0x1, R12
   \   000002   ........     CALLA   #isPressed
   \   000006   4E4C         MOV.B   R12, R14
     30          	char current_sw2_state = isPressed(SW2);
   \   000008   2C43         MOV.W   #0x2, R12
   \   00000A   ........     CALLA   #isPressed
     31          	
     32          	if ( !Last_SW1_State && current_sw1_state )
   \   00000E   5F42....     MOV.B   &Last_SW1_State, R15
     33          	{
     34          		
     35          	}
     36          	
     37          	if ( !Last_SW2_State && current_sw2_state ) 
   \   000012   5D42....     MOV.B   &Last_SW2_State, R13
     38          	{
     39          		
     40          	}
     41          	
     42          	Last_SW1_State = current_sw1_state;
   \   000016   C24E....     MOV.B   R14, &Last_SW1_State
     43          	Last_SW2_State = current_sw2_state;
   \   00001A   C24C....     MOV.B   R12, &Last_SW2_State
     44          }
   \   00001E   1001         RETA
     45          
     46          //isPressed
     47          //DESC: Used for polling the current pressed/not pressed status of either switch
     48          //ARGS: Macro or mask that acts to select the corresponding bit for the desires switch
     49          //RET: 1 if 'isPressed'; 0 if not 'isPressed'

   \                                 In  segment CODE, align 2
     50          char isPressed(int switchNum)
   \                     isPressed:
     51          {
     52          	if( (switchNum == SW1) || (switchNum == SW2) )
   \   000000   1C93         CMP.W   #0x1, R12
   \   000002   0224         JEQ     ??isPressed_2
   \   000004   2C93         CMP.W   #0x2, R12
   \   000006   0720         JNE     ??isPressed_3
     53          		return !(P4IN & switchNum);
   \                     ??isPressed_2:
   \   000008   C2BC2102     BIT.B   R12, &0x221
   \   00000C   0220         JNE     ??isPressed_4
   \   00000E   5C43         MOV.B   #0x1, R12
   \   000010   1001         RETA
   \                     ??isPressed_4:
   \   000012   4C43         MOV.B   #0x0, R12
   \   000014   1001         RETA
     54          	return 0;
   \                     ??isPressed_3:
   \   000016   4C43         MOV.B   #0x0, R12
   \   000018   1001         RETA
   \   00001A                REQUIRE _A_PBIN_L
     55          }

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Switches_Process
        4   -> isPressed
      4   isPressed


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      32  Switches_Process
       2  _A_PBIN_L
      26  isPressed

 
 58 bytes in segment CODE
  2 bytes in segment DATA16_AN
 
 58 bytes of CODE memory
  0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
