###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.60.5.50814/W32 for MSP430       15/Apr/2014  15:29:31 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  32                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430X                                                    #
#    __data_model  =  small                                                   #
#    Source file   =  C:\Users\Nathan\Documents\GitHub\ece306-linefollower\ma #
#                     in.c                                                    #
#    Command line  =  C:\Users\Nathan\Documents\GitHub\ece306-linefollower\ma #
#                     in.c -lC C:\Users\Nathan\Documents\GitHub\ece306-linefo #
#                     llower\Debug\List\ -o C:\Users\Nathan\Documents\GitHub\ #
#                     ece306-linefollower\Debug\Obj\ --no_cse --no_unroll     #
#                     --no_inline --no_code_motion --no_tbaa --debug          #
#                     -D__MSP430FR5739__ -e --double=32 --dlib_config         #
#                     "C:\Program Files (x86)\IAR Systems\Embedded Workbench  #
#                     6.5\430\LIB\DLIB\dl430xsfn.h" --core=430X               #
#                     --data_model=small -Ol --multiplier=32                  #
#                     --multiplier_location=4C0 --hw_workaround=CPU40         #
#    List file     =  C:\Users\Nathan\Documents\GitHub\ece306-linefollower\De #
#                     bug\List\main.lst                                       #
#    Object file   =  C:\Users\Nathan\Documents\GitHub\ece306-linefollower\De #
#                     bug\Obj\main.r43                                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Nathan\Documents\GitHub\ece306-linefollower\main.c
      1          /******************************************************************************
      2          Main
      3          
      4          DESC: This file contains the Main Routine - "While" Operating System
      5          
      6          GLOBALS: Last_SW1_State and Last_SW2_State are defined;
      7          display_1 and display_2 are changed
      8          
      9          Nathan Hansen, Feb 2014, Built with IAR Embedded Workbench Version: 5.60.5
     10          ******************************************************************************/
     11          
     12          
     13          //Include Statements
     14          #include  "msp430.h"
     15          #include  "functions.h"
     16          #include  "macros.h"
     17          
     18          
     19          // Shared Globals
     20          //char *display_1; now specified in functions.h and defined in LCD
     21          //char *display_2; now specified in functions.h and defined in LCD
     22          
     23          // Global Variables

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     24          volatile unsigned char control_state[CNTL_STATE_INDEX];
   \                     control_state:
   \   000000                DS8 3

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     25          volatile unsigned int Time_Sequence = RESET_TIME;
   \                     Time_Sequence:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     26          char led_smclk;
   \                     led_smclk:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     27          volatile char one_time;
   \                     one_time:
   \   000000                DS8 1
     28          
     29          
     30          
     31          //******************************************************************************
     32          // Main Program
     33          // This is the main routine for the program. Execution of code starts here.
     34          // The operating system is Back Ground Fore Ground.
     35          //******************************************************************************
     36          

   \                                 In  segment CODE, align 2
     37          void main(void)
   \                     main:
     38          {
     39          	Init_Ports();                             // Initialize Ports
   \   000000   ........     CALLA   #Init_Ports
     40          	Init_Clocks();                            // Initialize Clock System 
   \   000004   ........     CALLA   #Init_Clocks
     41          	Init_Conditions();
   \   000008   ........     CALLA   #Init_Conditions
     42          	Init_Interrupts();
   \   00000C   ........     CALLA   #Init_Interrupts
     43          	  
     44          	TimeMsec = RESET_TIME;
   \   000010   8243....     MOV.W   #0x0, &TimeMsec
     45          	Init_Timers(); 				// Initialize Timers
   \   000014   ........     CALLA   #Init_Timers
     46          	Init_LCD();				// Initialize LCD             
   \   000018   ........     CALLA   #Init_LCD
     47                  
     48                  
     49          	//          "0123456789abcdef"
     50          	display_1 = "   Project  8   ";
   \   00001C   B240........ MOV.W   #`?<Constant "   Project  8   ">`, &display_1
     51          	display_2 = "                ";
   \   000022   B240........ MOV.W   #`?<Constant "                ">`, &display_2
     52          	Display_Process();
   \   000028   ........     CALLA   #Display_Process
     53          	
     54          /* ---------- Begining of the "While" Operating System ------------- */
     55          	while(ALWAYS) 										// Can the Operating system run
     56          	{                            
     57                          if(TimeMsec % EVERY_50 == RESET_TIME)
   \                     ??main_0:
   \   00002C   1C42....     MOV.W   &TimeMsec, R12
   \   000030   3E403200     MOV.W   #0x32, R14
   \   000034   ........     CALLA   #?DivMod16u
   \   000038   0E93         CMP.W   #0x0, R14
   \   00003A   0220         JNE     ??main_1
     58                            Display_Process();
   \   00003C   ........     CALLA   #Display_Process
     59                          
     60                          ADC_Process();
   \                     ??main_1:
   \   000040   ........     CALLA   #ADC_Process
     61                          
     62                          Control_Process();
   \   000044   ........     CALLA   #Control_Process
     63                          
     64                          Motors_Process();
   \   000048   ........     CALLA   #Motors_Process
   \   00004C   EF3F         JMP     ??main_0
   \   00004E   0343         NOP
     65          	}
     66          }

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "   Project  8   ">`:
   \   000000   20202050726F DC8 "   Project  8   "
   \            6A6563742020
   \            3820202000  

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "                ">`:
   \   000000   202020202020 DC8 "                "
   \            202020202020
   \            2020202000  

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   main
        4   -> ADC_Process
        4   -> Control_Process
        4   -> Display_Process
        4   -> Init_Clocks
        4   -> Init_Conditions
        4   -> Init_Interrupts
        4   -> Init_LCD
        4   -> Init_Ports
        4   -> Init_Timers
        4   -> Motors_Process


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      17  ?<Constant "                ">
      17  ?<Constant "   Project  8   ">
       2  Time_Sequence
       3  control_state
       1  led_smclk
      80  main
       1  one_time

 
 80 bytes in segment CODE
 34 bytes in segment DATA16_C
  7 bytes in segment DATA16_Z
 
 80 bytes of CODE  memory
 34 bytes of CONST memory
  7 bytes of DATA  memory

Errors: none
Warnings: none
